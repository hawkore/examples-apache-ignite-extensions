#IGNITE INSTANCE CONfIFURAGION

#for testing - ignite home directory on 
IGNITE_HOME=${java.io.tmpdir}/servers/${nodeName}

#tells if this instance works as client node or acts as a server node
ignite.this.node.asclient=false
ignite.this.node.gridname=ignite_dev_grid

#AUTO CLUSTER ACTIVATION DELAY IN MILISECONDS WHEN PERSISTENCE IS ENABLED
ignite.this.node.delayForClusterActivation=20000
ignite.this.node.autoRegisterNodeOnBaseTopologyWhenJoin=true

#ignite config files location for testing
ignite.this.node.config=./target/classes

#IGNITE Work directory -  If not provided, the method will use work directory under IGNITE_HOME, if IGNITE_HOME is not provided then system temp directory is used
ignite.this.node.WorkDirectory=${IGNITE_HOME}/work

#IGNITE GLOBAL NATIVE PERSISTENCE
#enabled or disabled ignite global native persistence - only applied is this node acts as a server node
ignite.this.node.persistence.enabled=true
#DEFAULT - Data updates are never lost surviving any OS or process crashes, or power failure
ignite.this.node.persistence.walMode=LOG_ONLY
#Sets a node to the root directory where data and indexes are to. It's assumed the directory is on a separated HDD
ignite.this.node.persistence.storagePath=${ignite.this.node.WorkDirectory}/ignite/persistence
#Sets a path to the directory where WAL is stored. It's assumed the directory is on a separated HDD
ignite.this.node.persistence.walPath=${ignite.this.node.WorkDirectory}/ignite/wal
#Sets a path to the directory where WAL archive is stored. The directory is on the same HDD as the WAL.
ignite.this.node.persistence.walArchivePath=${ignite.this.node.WorkDirectory}/ignite/archive

#IGNITE TCP discovery SPI
ignite.this.node.ipfinder.bean=LocalIpFinder
ignite.this.node.ipfinder.localport=45500
ignite.this.node.ipfinder.portrange=5

#PERFORMANCE
#Configure internal thread pool
ignite.this.node.publicThreadPoolSize=5
#Configure system thread pool
ignite.this.node.systemThreadPoolSize=5
#Configure stripped thread pool
ignite.this.node.stripedPoolSize=5
#Configure rebalance Thread Pool Size
ignite.this.node.rebalanceThreadPoolSize=4
#Configure checkpointing Thread Pool Size
ignite.this.node.checkpointingThreads=2
#tipical on very stable low-latency network 500ms...
ignite.this.node.failureDetectionTimeout=60000


#SEMENTATION DETECTION (Invalid node)
#Segmentation Policy default STOP (Call)
#RESTART_JVM, restart Ignite node. Usefull on server nodes. Note that this will work only if Ignite is started with {@link org.apache.ignite.startup.cmdline.CommandLineStartup} via standard {@code ignite.{sh|bat}} shell script
#STOP, usefull on client nodes. Hawkore internal implementation controls disconnections a make a new one if stopped
#NOOP, it is up to user to implement logic to handle {@link org.apache.ignite.events.EventType#EVT_NODE_SEGMENTED}.
ignite.this.node.segmentationPolicy=RESTART_JVM
#Segmentation resolve attempts until apply segmentation policy, default 2 attempts
ignite.this.node.segmentationResolveAttempts=5







